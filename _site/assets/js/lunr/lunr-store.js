var store = [{
        "title": "My First Post",
        "excerpt":"Welcome to My Blog!   Welcome! This is my very first post on my new blog, and I’m thrilled to share my journey of exploration and information-sharing with fellow students like myself!   Most important question first, so how did I get into Machine Learning?   Well, I’ve always been interested in self-improvement. This interest started at a young age, focusing not only on becoming more effective in my studies but also on optimizing my mental and physical well-being. I regularly listen to inspiring figures like Andrew Huberman, Lex Friedman, and many more. More specifically, my journey into Machine Learning began when I took a course at UNSW called “Digital and Web Analytics.” One of the assessment tasks was to perform a sentiment analysis on a crisis a company had gone through.   Initially confused about what “sentiment analysis” entailed, I started exploring scientific papers, attending random lectures, and kept encountering the term “Machine Learning.” Somehow, I created a sentiment analysis of public opinion on whether comments on YouTube and Twitter were positive, negative, or neutral using Natural Language Processing. I coded, but I faced one big problem—I had no idea how the sentiment analysis packages worked.   Additionally, while navigating this, I was concurrently enrolled in a course on “Linear Models,” delving into topics like linear regression, which significantly sparked my interest. Unfortunately, the lectures never explained anything about what Machine Learning is! Why! Fueled by motivation to learn how exactly a machine categorizes words and wha alternative are there to linear regression, I scoured the internet to learn more, eventually leading me to discover the vast world of Machine Learning! And that’s the current journey I’m on now, and I can’t wait to learn more!  ","categories": ["Miscellaneous"],
        "tags": [],
        "url": "/miscellaneous/first-post/",
        "teaser": null
      },{
        "title": "CS229 Review",
        "excerpt":"Review of Standford CS229 course   Summary     Requires at least level 2 university mathematics. This includes an understanding of Multivariate Calculus and a bit of Linear Algebra.   Lectures provide the backbone understanding but don’t delve into the mathematics. In order to maximize the learning process, ensure completing all problem sets.   Standford students, after completing the course, create their own machine learning application. I suggest completing one as well.   Having a strong understanding of Linear Models is beneficial to understanding most concepts due to the fast pace of the course.   Comprehensive Review   Introduction   After wanting to learn machine learning, I scoured the internet to find the best resources, knowing there was an unimaginable amount of books, videos, tutorials, and articles, it just left me confused and flustered!   To narrow my focus, I wanted to learn from the best, so who really is the best academic in the machine learning space? Well, everyone unanimously agrees that Andrew Ng is probably the best ML teacher, and he offers amazing courses such as on Coursera. But after hearing about the world-famous CS229 as the origin of many students’ introduction to ML, I decided to take the 2018 CS229 course by Stanford.   Who is this course for?   Don’t take this course if you don’t have at least a level 2 university-level mathematics course previously. The main value in this course is it takes a dive into the mathematics behind popular machine learning algorithms. Since the focus is on mathematics, I’ve read many comments under the lecture videos stating, “Is it okay if I don’t understand the mathematics?” Well, not really, since I feel there are better resources less focused on the mathematics and provide an intuitive understanding, such as “Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow” and “The Hundred-Page Machine Learning Book by Andriy Burkov,” which just give an overview of the algorithms focusing on implementation over mathematics.   Is it okay to watch the 2018 version with Andrew Mg over the new iterations of the course?   Many popular machine learning algorithms have been around for decades. Since this course aims to focus on the most popular algorithms in machine learning, these algorithms have been established decades ago. Let me give you an example:      Linear Regression: Sir Francis Galton in 1895   Support Vector Machine: AT&amp;T Bell Laboratories by Vladimir Vapnik with colleagues in 1993   Principal Component Analysis: Karl Pearson in 1901   As you can see these algorithsm have been discovered decades ago. I would recommend doing the 2018 course so you can gain a true understanding of why Andrew Ng is considered one of the best ML teachers.   How to acess the other class material, like problem sets and lectures notes?   Supplement with the lectures are problems seta dn lectures notes. I’v found watching #link(statques) as well as #(github)   What to do next?   After completing the course, you should feel that you have a strong basic understanding of popular machine learning algorithms. It is important that you don’t just watch the lectures but also ensure you understand everything you’ve watched. Ensure you use the Feynman technique to try to explain concepts in your own words and don’t get trapped into the bubble of just watching lectures and thinking you know the concepts because when the interview comes around, how can you explain these concepts to the interviewer?   Personally, I’ll be now taking the “Machine Learning Specialization” as well as creating my own scikit-learn emulation module to improve my ML and programming skills. I recommend you continue a similar path, now trying to do Kaggle problems or start.   Concluding   Watching CS290 has been a beatiful journey and i really appriate standford making this course acceisble to everyone if you want notes here!   ","categories": ["Review"],
        "tags": [],
        "url": "/review/CS290-review/",
        "teaser": null
      },{
        "title": "David Goggins : An Inspiration.",
        "excerpt":"I just wanted to take some time and appreciate the man who is David Goggins. He is someone I have admired for years. The man is the definition of hard work always beating talent. No matter where you are at in life, you don’t have to have started off at 15 years old working towards your dream.   Weirdly enough, I’ve seen a lot of people around me recently settling down into full-time roles and, I guess, kind of just accepting where they are at in life. I currently work at officeowkrs, where I get to interact with slightly older co-workers, and I always hear “I’m too old to change my job,” “I’m too old to learn this now.” I am just astonished at the little self-belief and motivation some people have. Now, don’t get me wrong; there is nothing bad about working at officeowkrs, but the importance of having a job that allows you to explore your creativity and limits is something that I hold very highly.   Even my mum, when she says recently, “Oh, I won’t be able to learn sewing these clothes; I’ll just give it to the lady even though I’m not happy with her services.” Like DAM mum, come on, age does not equal can’t learn new things.   I remember watching a Huberman podcast about how to learn faster, and he states one of the most important things is “failure” leads to skill acquisition; right now, that’s definitely true with the relationship I have with LeetCode. Humph. But that’s the process; it’s failure leading to success.   Now going back to David Goggins, his transformation started a lot older in his life, and I know many people can’t believe how someone can turn their life around once it’s settled down. Funny enough, I remember Joe Rogan talking about how Hitler was just a normal soldier until one day he became this leader out of nowhere—I put it down to cocaine. Hahaha. People just don’t believe change can come.   Importantly, many people reserve his mindset for physical activity, one of which I always questioned, ‘I’m a student; he doesn’t spend hours studying though.’ I feel like physically exerting yourself is a lot easier to me than mentally exercising yourself. But are these two fruits from the same tree? Well, I guess so. My mind is completely changed now; David Goggins is becoming a paramedic, even though he has diagnosed severe ADHD, stating his state ranking marks. In a recent podcast with Andrew Huberman link here!, David Goggins explores his latest endeavor, emphasizing his daily challenge of fighting the urges of drugs. For years, Goggins has been an advocate of the importance of doing tasks you don’t like in building an indomitable mind and body. Interestingly, he talks about how much he hates running, yet every day he wakes up and runs a marathon. Finally, it’s been scientifically proven: the importance of doing tasks you don’t like to build a part of your brain   My final thoughts: Am I  doing everything I can?   ","categories": ["Inspiration"],
        "tags": [],
        "url": "/inspiration/David-Goggins/",
        "teaser": null
      },{
        "title": "Is it true that long-term injuries comes from prior minior injuries?",
        "excerpt":"A lense from a statistical point of view. Can we create a ML model to predicit the outcomes?   Introduction   After watching sports for many years, I noticed non-contact injuries, especially in the NBA. I went on to examine it. Randomly, I clicked on a video where a popular YouTuber states, ‘Look at KD; he had an ACL injury, and before that, he had a calf strain.’ Is this really true? The YouTube channel mentioned is MPJPerformance, and the video link is here!   Retriving and Cleaning the data   Firstly getting the data   Luckly for me the raw data is already avaliable, big thanks to JaseZiv for the github repositry click here!   How is the data currently structured?   the file named “nba_injuries” has webcrawled various NBA sources and the origian files follow a JSON schema as follows:      Date: 1947-08-05   Team: Bombers (BAA)   Acquired:   Relinquished: Jack Underman   Notes: fractured legs (in auto accident) (out indefinitely) (date approximate)   Creating a database and cleaning up the data   Before we can clean the data to remove duplicates and unnessary/missing inputs we first need to create a database scehema appropriate to our queries and data retrival goals.      Identify all injured playes easily   Idenify length of injury easily   Identify if this play has prior/future injury   Proximity of next injury/prior injury   Based on these retrival goals we can take a view from a statisatical POV if “long term injuries are srouced from short term injuries”. Where we can explore…   As pointed out by Chip Huyen in Chapter two of “Designing Machine Learning Systems” states the importance of Data Models “How you choose to represent data not only affects the way your systems are built, but also the problems your systems can solve”. Using this chapter as a out Chip outlines “NoSQL” to follow a strict schema, therefore for time saving we will use a “Relational Database”.   Let’s start off by examing it from a statistics point of view?   building the story  ","categories": ["Projects"],
        "tags": [],
        "url": "/projects/nba-risk-injury/",
        "teaser": null
      },{
        "title": "My Machine Learing Mastery Roadmap",
        "excerpt":"After watching many videos and having a solid foundational of a overview of concepts  and tool in machine learing i beleive it finally time for me to make a curriculm!   Hmmm…How do i go about this?   Before asessing my weakness, what are my inspiration say is a good pathway?  Well after watching Lex Fridman interview with Andrew Ng here!  he speicficed the improtance of taking the refined coursework including ML, Deep Learning, Mlops, tensorflow certification courses then focusing once you have taken enough courses then work on projects and reading research papers.   Addtionally, Daniel Bourke, a fellow Australian has created a amazing mindmap (i love mindmaps) for a stack needed to become a ML engineer (here!)[https://whimsical.com/machine-learning-roadmap-2020-CA7f3ykvXpnJ9Az32vYXva]. The main focuses resrouces including fast.ai, CS50’s, Hnads-on Machine Learning by Aurelien Geron.   Focus on the weakness   I beleive (currently?) Machine learning ecosystem can be broken down into the follow skills      Mathematics   ML algorithms   MLops   Python skills   Cloud Services   SQL database   Since i have a currenlty pursuing a Mathhematics and Marketing degree, the main focus should be builing later half. Althought i have expericnes with Cloud Services including AWS and  SQL database i will significnatly have to improve in this area. Addtionally, my Python skills a desent but thtere is a way to go   What i have currently done?   Well currently i have completed/doing:      CS29 by Andrew Ng   Hands-On Machine Learning with Scikit-Learn and Tensorflow   The Hundred-page Machine Learning Book by Andriy Burkov   Deep learning Specialisation by Andrew Ng   The Roadmap With Certifications      Programming            “Python 3 Object-Oriented Programming” by Dusty Phillips       “Fluent Python” Book by Luciano Ramalho       “Algorithms” Princeton University       “Coding Interview University” (github)[https://github.com/jwasham/coding-interview-university]           ML algorithms            Deep Learning for Coders with fastai &amp; PyTorch       Introduction to Machine Learning with Python: A Guide for Data Scientists       Neural Networks : Zero to hero by Andrej Karpathy       Recipe for training neural networks by Andrej Karpathy       Papers with Code : Most popular and Recent machine learning papers           MLops            Desigining Machine Learing Systems by Chip Huyen       Stanford’s CS 329S: Machine Learning Systems Design by Chip Huyen       Coursera’s MLOps Specialization by DeepLearning.AI       Full Stack Deep Learning       fast.ai           Cloud            Microsoft Certified: Azure Fundamentals           SQL            LeetCode SQL       SQL for Data Analysis Advanced Techniques for Transforming Data into Insights       SQL Tutorial for Beginners (and Technical Interview Questions Solved) by freeCodeCamp.org           Structure   Currently since unviersity off i have a little time to concurrently complete 2 courses at the same time, the plan is i want to read for projects i want to have a project in mind work on whilst reading/watching resources. The currentl systtemiatic plan is;      Deep learning Specialisation by Andrew Ng  + Stanford’s CS 329S: Machine Learning Systems Design by Chip Huyen   Neural Networks : Zero to hero by Andrej Karpathy + Recipe for training neural networks by Andrej Karpathy   “Algorithms” Princeton University + “Fluent Python” Book by Luciano Ramalho   Full Stack Deep Learning + fast.ai   Microsoft Certified: Azure Fundamentals + SQL Tutorial for Beginners (and Technical Interview Questions Solved) by freeCodeCamp.org   ","categories": ["Machine Learning"],
        "tags": [],
        "url": "/machine%20learning/machine-learning-curriculum/",
        "teaser": null
      },{
        "title": "Functional vs Sequetial API for Keras in less then 3 minutes",
        "excerpt":"Reading to Keras/Tensorflow documentation, it’s a little hard to understand what exactly is the difference between sequential and functional API and all other resources are too long to read, so lets simplify it!   Lets talk visually:      The whole point of Tensorflow with Keras is to simply the process of creating neural networks so now we dont spend time on manully coding a neural network, but rather focus on improving the performance of our model. Now how exactly does Functional api improve flexibility but at the cost of complexity?   Sequential API  Sequential API’s tipically look like this:      Notice, although we specify the pooling dimensions and strides and other arguements within the tf.keras.layers call , we can’t input specific paramters like Z1,A1 or Z2. Importantly it all happens sequentially so the model will start from the top end go by each call one by one until the end.   Function API : spot the difference  Alternatively, comparing this to functional API it allows use to play around with the parameters:      Notice how we adding paramters to our calls to tf.keras.layers()(Paramter) providing us flexibility to choose which parameters we want to trasnform. Note this is just one way of taking advantage of function API. Other possible options are :     Multiple inputs - Now we can have multiple paramters since our functional isnt called linearly   Sharing inputs - say we want Z1 to have multiple acitivations say Leaky-RelU and ReLU   But as you can see the possibility or errors increases since you can play around with which inputs you want where. So be careful!   Conclusion   Hopefully now you understand the difference between Sequential and Functional API!  ","categories": ["Machine Learning"],
        "tags": [],
        "url": "/machine%20learning/functional-sequential-api/",
        "teaser": null
      },{
        "title": "Roadmap to Learn Transformers in less then 3 minutes",
        "excerpt":"When I started my journey into machine learning, I remember watching an interview with Andrej Karpathy, a Sr. Director of AI at Tesla, on the Lex Fridman podcast, where he talked about something called a “transformer,” and he described it so profoundly as a new way of computing. In combination, I had learned that ChatGPT, BERT were all powered by transformers and that in order to become a machine learning engineer, you NEEDED to know transformers.   But upon looking online for a simple roadmap of the topic I needed to cover, I found that most blog posts focus on the individual components you need to know inside a transformer architecture rather than how to get to the point to potentially understand a transformer architecture.   Definition of Transformer: Machine learning architectures that allow asking multiple questions about an input and receiving answers out of questions from surrounding inputs, which helps us compute an output!   So lets beging   1 . Some basic understanding on Machine Learning   Definition of Machine Learning: process of exploring data using mathematics to create scalable and reusable algorithms in order to make decisions/improve society. Pretty much give an algorithm some data with output or no outputs and hope it can solve new data using this given data.   Machine Learning is broken down into two parts: Supervised and Unsupervised learning (kinda there are a few subsets of machine learning, but we only need to focus on these)   Supervised: given we feed the algorithm with pairs of inputs and corresponding outputs. The goal of supervised learning is to feed new inputs and try to figure out an output.   Unsupervised learning: where you feed the algorithm inputs and outputs, but your goal isn’t to predict new outputs but rather identifying patterns, visualizations, etc.   I recommend just going through “The Hundred-Page Machine Learning Book” by Andriy Burkov, getting a basic grip of the concepts.   So a subset of machine learning techniques is deep learning. A part of deep learning is the transformer architecture.      Deep learing   Now the main concept you should learn is:      Feedfoward Neural Networks -&gt; Focus!   CNN - the basics   RNN - learn GRU’s and LSTM’s   Attention Architecture   Transformers Architecture   You should complete these processes in order and ensure you have a strong understanding of feedforward neural networks. I recommend these two resources:      (Neural Networks and Deep Learning)[http://neuralnetworksanddeeplearning.com]   (3blue2brown)[https://www.youtube.com/watch?v=aircAruvnKk&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi]   There you go!  ","categories": ["Machine Learning"],
        "tags": [],
        "url": "/machine%20learning/how-to-learn-transformers/",
        "teaser": null
      },{
        "title": "Olympiad Level Counting Made Easy with Jensen's inequality",
        "excerpt":"Have you every wondered how high school students with no formal higher level of mathematical knowledge are able to solve complex questions like this? Prove that   \\[\\frac{1}{x-1}+ \\frac{1}{x} + \\frac{1}{x+1} \\geq \\frac{3}{x},\\quad x &gt; 1.\\]  Or   \\[(1 + \\frac{1}{x})(1 + \\frac{1}{y})(1 + \\frac{1}{z}) \\geq 64.\\]  Many of you have no idea how some 14 year old kid is able to solve these questions, yet at my final year of university, I am still not able to intuitively solve these. I believe that this is true for most university students.   Now, of course, the most rational method would be trying to move all the variables to one side, then try estimating the values for which the right-hand side equals the left-hand side. Then, the exam hits you with give me exact values for \\(x,y,z\\) and now you are stumped with this 1 hour exam and  you’ll just about spend most of your time guessing possible values. Here comes the bang, Olympiad contestants in my eyes now are of course genius, but they know a set of specialised tools in their tool bag of which they select the appropriate tool for the job. Now, selecting a the right tool can be difficult (Mathematics tool bags a very,very deep).   One of the most powerful tools in the mathematics tool bag : Jensen’s Inequality.  For any convex function \\(h\\), we have,   \\[\\mathbb{E}h(Y) \\geq h(\\mathbb{E}Y)\\]  How did we get to conclusion of the great ‘power’ of Jensen’s Inequality? According to my professor, Dr.Zdravko Botev, power comes from two key characteristics (1) simplicity (2) usefulness. Not only is Jensen Inequality applicable in a range of context, including counting as above, but also real analysis, probability, economics, statistics, and machine learning, but it’s proof that it is so simple.   \\(\\textit{Proof.}\\) From the definition of convexity, we have for x and all Y:   \\[h(Y) \\geq h(x) + v^T(Y-x)\\]  By the monotonicty and linearity of expectation, we have   \\[\\mathbb{E}h(Y) \\geq h(x) + v^T\\mathbb{E}(Y-x)\\]  Now, since this is true for each \\(x\\) we can chose \\(x = \\mathbb{E}(Y)\\). So,   \\[\\mathbb{E}h(Y) \\geq h(\\mathbb{E}Y) + v^T\\mathbb{E}(Y-\\mathbb{E}Y) \\Rightarrow  \\mathbb{E}h(Y) \\geq h(\\mathbb{E}Y).\\]  Which is Jensen’s Inequality.   Now, how do we apply this powerful tool to our counting problem?  The idea is that we want to find a convex function which applies to the problem and hence we can use Jensen’s Inequality. So, for:   \\[\\frac{1}{x-1}+ \\frac{1}{x} + \\frac{1}{x+1} \\geq \\frac{3}{x},\\quad x &gt; 1.\\]  We can try \\(h(x) = \\frac{1}{x}\\) or \\(h(x) = \\frac{1}{x + 1}\\) or \\(h(x) = \\frac{1}{x - 1}\\) and we can confirm that these a convex function by showing  \\(h\"(x) &gt; 0, \\forall x \\in \\mathbb{R}\\). Now, lets try  \\(h(x) = \\frac{1}{x}, x &gt; 1\\). Now, for a random variables \\(Y\\) we apply Jensen’s Inequality,   \\[\\mathbb{E}[\\frac{1}{Y}] \\geq \\frac{1}{\\mathbb{E}Y}\\]  Next we consider a distribution for \\(Y\\). Since, we have 3 fractions a logical choice would be for \\(Y\\) distribution,   \\[\\mathbb{P}(Y = x) = \\mathbb{P}(Y = x + 1) = \\mathbb{P}(Y = x - 1) = \\frac{1}{3}.\\]  For this \\(Y\\), we have a three point distribution, we can compute the expectations and hence Jensen’s inequality,   \\[\\begin{align*}     \\mathbb{E}[\\frac{1}{Y}] = \\frac{1}{3} \\times \\frac{1}{x} + \\frac{1}{3} \\times \\frac{1}{x - 1} + \\frac{1}{3} \\times \\frac{1}{x + 1}, \\\\     \\frac{1}{\\mathbb{E}Y} = \\frac{1}{\\frac{1}{3} \\times \\frac{1}{x} + \\frac{1}{3} \\times \\frac{1}{x - 1} + \\frac{1}{3} \\times \\frac{1}{x + 1}} = \\frac{1}{x}. \\end{align*}\\]  So,   \\[\\begin{align*}     \\mathbb{E}[\\frac{1}{Y}] &amp;\\geq \\frac{1}{\\mathbb{E}Y} \\Rightarrow \\\\     \\frac{1}{3}[\\frac{1}{x-1} + \\frac{1}{x} + \\frac{1}{x+1}] &amp;\\geq \\frac{1}{x} \\Rightarrow \\\\     \\frac{1}{x-1} + \\frac{1}{x} + \\frac{1}{x+1} &amp;\\geq \\frac{3}{x}. \\end{align*}\\]  Wala! Wasn’t that hard, right? Maybe you can try this one,   \\[(1 + \\frac{1}{x})(1 + \\frac{1}{y})(1 + \\frac{1}{z}) \\geq 64.\\]  hint: \\(h(x) = \\text{ln}(1 + \\frac{1}{x})\\)  ","categories": ["Statistics"],
        "tags": [],
        "url": "/statistics/Olympaid-Level-Counting/",
        "teaser": null
      }]
